{
    "investor_list": [
        {
            "name": "Minke",
            "funds": 10000,
            "strategy": "def strategy_1(df):\n        if len(df) <= 20:\n            return 'buy', 0.2\n        elif len(df) <= 40:\n            return 'sell', 0.8\n        \n        elif df['minutes_remaining'].iloc[-1] < 9:\n            return 'sell', 0.7\n        elif len(df) %2 == 0:\n            return 'buy', 0.2\n        elif len(df) %2 == 1:\n            return 'sell', 0.1\n        return 'buy', 0.1"
        },
        {
            "name": "Humpback",
            "funds": 15000,
            "strategy": "def strategy_1(df):\n        if len(df) < 5:\n            return 'buy', 0.5\n        elif df['minutes_remaining'].iloc[-1] < 8:\n            return 'sell', 0.7\n        elif len(df) %2 == 0:\n            return 'buy', 0.2\n        elif len(df) %2 == 1:\n            return 'sell', 0.1\n        return 'buy', 0.1"
        },
        {
            "name": "Moby Dick",
            "funds": 20000,
            "strategy": "def strategy_1(df):\n        if len(df) < 5:\n            return 'buy', 0.5\n        elif df['minutes_remaining'].iloc[-1] < 7:\n            return 'sell', 0.7\n        elif len(df) %2 == 0:\n            return 'buy', 0.2\n        elif len(df) %2 == 1:\n            return 'sell', 0.1\n        return 'buy', 0.1"
        },
        {
            "name": "noisy boi",
            "funds": 1000,
            "strategy": "def my_strategy(history):\n        from random import choice, random \n        return (choice(['buy','sell','hold']),random())"
        },
        {
            "name": "stick_in_the_mud",
            "funds": 1000,
            "strategy": "def stick_in_the_mud(history):\n        return 'hold', 0.0"
        },
        {
            "name": "tulip tycoon ryan",
            "funds": 1000,
            "strategy": "def my_strategy(history):\n        import pandas as pd\n        import numpy as np\n        if history.empty:\n            return 'buy', 1.0\n    \n        history_df = history.sort_values(\"\"transaction\"\")\n    \n        # if volume is above 80% buy\n        if history_df[\"\"price_history\"\"].iloc[-1] < 0.125:\n            return 'buy', 1.0\n    \n        history_df[\"\"price_change\"\"] = history_df.diff()[\"\"price_history\"\"]\n        history_df[\"\"price_change_sign\"\"] = np.sign(history_df[\"\"price_change\"\"])\n        sell_threshold = 0\n    \n        if history_df[\"\"minutes_remaining\"\"].iloc[-1] >= 40:\n            return 'buy', 1.0\n        # must be >> 10 values in df by this point\n        elif sum(history_df[\"\"price_change_sign\"\"].tail(10)) < sell_threshold:\n            return 'sell', 1.0\n        else:\n            return 'hold', 0.0"
        },
        {
            "name": "ASR",
            "funds": 1000,
            "strategy": "def implement_trading_strategy(history):\n        if history.empty:\n            return 'buy', 1.0\n        current_price = history.tail(1).price_history.iloc[0]\n        mean_price = sum(history.price_history) / len(history.price_history)\n        if current_price <= mean_price:\n            return 'buy', 1.0\n        return 'sell', 1.0"
        }
    ]
}
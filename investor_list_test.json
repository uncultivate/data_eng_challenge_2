{
    "investor_list": [
        {
            "name": "Minke",
            "funds": 10000,
            "strategy": "def strategy_1(df):\n        if len(df) <= 20:\n            return 'buy', 0.2\n        elif len(df) <= 40:\n            return 'sell', 0.8\n        elif df['minutes_remaining'].iloc[-1] == 18:\n            return 'sell', 0.9\n        elif df['minutes_remaining'].iloc[-1] == 17:\n            return 'buy', 1\n        \n        elif df['minutes_remaining'].iloc[-1] < 9:\n            return 'sell', 0.7\n        elif df['minutes_remaining'] < 13:\n            return 'buy', 0.9\n        elif len(df) %2 == 0:\n            return 'buy', 0.2\n        elif len(df) %2 == 1:\n            return 'sell', 0.1\n        return 'buy', 0.1"
        },
        {
            "name": "Humpback",
            "funds": 15000,
            "strategy": "def strategy_1(df):\n        if len(df) < 5:\n            return 'buy', 0.3\n        elif df['minutes_remaining'].iloc[-1] == 16:\n            return 'sell', 0.9\n        elif df['minutes_remaining'].iloc[-1] == 15:\n            return 'buy', 1\n        elif df['minutes_remaining'].iloc[-1] < 8:\n            return 'sell', 0.7\n        elif df['minutes_remaining'] < 13:\n            return 'buy', 0.9\n        elif len(df) %2 == 0:\n            return 'buy', 0.2\n        elif len(df) %2 == 1:\n            return 'sell', 0.1\n        return 'buy', 0.1"
        },
        {
            "name": "Moby Dick",
            "funds": 20000,
            "strategy": "def strategy_1(df):\n        if len(df) < 5:\n            return 'buy', 0.2\n        elif df['minutes_remaining'].iloc[-1] == 14:\n            return 'sell', 0.9\n        elif df['minutes_remaining'].iloc[-1] == 13:\n            return 'buy', 1\n        elif df['minutes_remaining'].iloc[-1] < 7:\n            return 'sell', 0.7\n        elif df['minutes_remaining'] < 13:\n            return 'buy', 0.9\n        elif len(df) %2 == 0:\n            return 'buy', 0.3\n        elif len(df) %2 == 1:\n            return 'sell', 0.2\n        return 'buy', 0.1"
        },
        {
            "name": "noisy boi",
            "funds": 1000,
            "strategy": "def my_strategy(history):\n        from random import choice, random \n        return (choice(['buy','sell','hold']),random())"
        },
        {
            "name": "stick_in_the_mud",
            "funds": 1000,
            "strategy": "def stick_in_the_mud(history):\n        return 'hold', 0.0"
        },
        {
            "name": "tulip tycoon ryan",
            "funds": 1000,
            "strategy": "def my_strategy(history):\n        import pandas as pd\n        import numpy as np\n        if history.empty:\n            return 'buy', 1.0\n    \n        history_df = history.sort_values('transaction')\n    \n        # if volume is above 80% buy\n        if history_df['price_history'].iloc[-1] < 0.125:\n            return 'buy', 1.0\n    \n        history_df['price_change'] = history_df.diff()['price_history']\n        history_df['price_change_sign'] = np.sign(history_df['price_change'])\n        sell_threshold = 0\n    \n        if history_df['minutes_remaining'].iloc[-1] >= 40:\n            return 'buy', 1.0\n        # must be >> 10 values in df by this point\n        elif sum(history_df['price_change_sign'].tail(10)) < sell_threshold:\n            return 'sell', 1.0\n        else:\n            return 'hold', 0.0"
        },
        {
            "name": "ASR",
            "funds": 1000,
            "strategy": "def implement_trading_strategy(history):\n        if history.empty:\n            return 'buy', 1.0\n        current_price = history.tail(1).price_history.iloc[0]\n        mean_price = sum(history.price_history) / len(history.price_history)\n        if current_price <= mean_price:\n            return 'buy', 1.0\n        return 'sell', 1.0"
        },
        {
            "name": "msi_guy",
            "funds": 1000,
            "strategy": "def msi_guy(history):\n        # I want to participate but I can't\n        return 'hold', 0.0"
        },
        {
            "name": "Rhodonea Curve",
            "funds": 1000,
            "strategy": "def rose_graph(df):\n        import numpy as np\n        import pandas as pd\n        # import matplotlib.pyplot as plt\n        \n        if len(df) > 1:\n            # Create a polar rose (get it?!) to figure out how much to buy/sell\n            A = 1 # Size of the rose (max buy/sell = 1.0)\n            i = max(df['transaction']) # Index of latest price\n            n = df.loc[df['transaction'] == i, 'price_history'].values # most recent price\n            d = df.loc[df['transaction'] == i-1, 'price_history'].values # last price\n            k = n/d # k value to create our rose\n    \n            # Build the rose theta values based on the minutes remaining\n            angle = df.loc[df['transaction'] == i, 'minutes_remaining'].values\n            theta = np.linspace(0, angle, 1000)\n    \n            # Plot the x and y coordinates of the rose\n            x = A*np.cos(k*theta)*np.cos(theta)\n            y = A*np.sin(k*theta)*np.cos(theta)\n            final_pt = [x[-1], y[-1]] # The final point determines our buy/sell rate!\n    \n            # # Plot for fun (optional)\n            # plt.plot(x, y)\n            # plt.scatter(final_pt[0], final_pt[1], c = 'r')\n            # plt.show()\n    \n            direction = n-d # Figure out which direction the price is moving\n            magnitude = np.sqrt(final_pt[0]**2 + final_pt[1]**2)[0] # magnitude of final point = buy/sell rate\n    \n            # Buy low sell high!\n            if direction < 0:\n                b_s = 'buy'\n            elif direction > 0:\n                b_s = 'sell'\n            elif direction == 0:\n                b_s = 'hold'\n                \n            return b_s, magnitude\n        else: # Arbitrarily buy on the first round (I'm lazy)\n            return 'buy', 0.2"
        },
        {
            "name": "TulipStop_enegue",
            "funds": 1000,
            "strategy": "def glory(history):\n        if(history.empty):\n            return 'buy', 0.995\n        elif(history['transaction'].iloc[-1]<100):\n            return 'buy', 0.995\n        elif(history['price_history'].iloc[-1] < history['price_history'].iloc[-41]) :\n            return 'sell', 0.995\n        elif(history['price_history'].iloc[-1] < history['price_history'].iloc[-21]) :\n            return 'sell', 1-  history['price_history'].iloc[-1] / history['price_history'].iloc[-21]\n        elif(history['minutes_remaining'].iloc[-1] >40 and history['price_history'].iloc[-1] > history['price_history'].iloc[-10] and history['price_history'].iloc[-1] > history['price_history'].iloc[-20] ) :\n            return 'buy', 0.2\n        else:\n            return 'hold', 0"
        },
        {
            "name": "Volatile",
            "funds": 1000,
            "strategy": "def tulip_coin_strategy(history):\n        if not history.empty:\n            current_price = history.iloc[-1]['price_history']\n            minutes_remaining = history.iloc[-1]['minutes_remaining']\n            proportion=0.0\n        \n            if minutes_remaining>=53:       #at the first opportunity you get, buy everything as it is surely the cheapest it will be. Surely there will be a chance to buy in the first 7 minutes.\n                decision='buy'\n                proportion=1\n            \n            elif 10<=minutes_remaining<53:\n                if current_price>6:\n                    decision='sell'\n                    proportion=0.20\n                elif current_price<4:\n                    decision='buy'\n                    proportion=0.30\n                else: \n                    decision='hold'\n                    proportion=1\n            \n            elif 5<=minutes_remaining<10:\n                if current_price>5:\n                    decision='sell'\n                    proportion=1  #leaving a tiny bit in coins\n                else: \n                    decision='hold'\n                    proportion=1\n        \n            elif 0<=minutes_remaining<5:\n                if current_price>4:\n                    decision='sell'\n                    proportion=1\n                else:\n                    decision='hold'\n                    proportion=1\n        \n            return decision, proportion\n            \n        return 'hold', 1"
        },
        {
            "name": "Jacob Van Der Beurze",
            "funds": 1000,
            "strategy": "def jacob_van_der_beurze(history):\n        if len(history) >= 10:\n            recent_history = history.tail(10)\n            \n            # Calculate change\n            initial_price = recent_history.iloc[0]['price_history']\n            latest_price = recent_history.iloc[-1]['price_history']\n            price_change = (latest_price - initial_price) / initial_price\n            \n            if price_change >= 1.0:\n                # Sell 20% of coins if price has increased by 100% or more\n                return 'sell', 0.2\n            elif price_change <= -4.0:\n                # Buy with 100% of money if price has decreased by 400% or more\n                return 'buy', 1.0\n    \n        # Default is hold\n        return 'hold', 0.0"
        },
        {
            "name": "Window of Opportunity",
            "funds": 1000,
            "strategy": "def moving_average_tf(history):\n        short_window = 5\n        long_window = 10\n    \n        if len(history) < long_window:\n            return ('hold', 0.0)\n    \n        history['short_mavg'] = history['price_history'].rolling(window=short_window, min_periods=1).mean()\n        history['long_mavg'] = history['price_history'].rolling(window=long_window, min_periods=1).mean()\n    \n        short_mavg = history['short_mavg'].iloc[-1]\n        long_mavg = history['long_mavg'].iloc[-1]\n        minutes_remaining = history['minutes_remaining'].iloc[-1]\n    \n        if minutes_remaining > 2400:\n            proportion = 0.2\n        elif 1200 < minutes_remaining <= 2400:\n            proportion = 0.5\n        else:\n            proportion = 0.8\n    \n        if short_mavg > long_mavg:\n            return ('buy', proportion)\n        elif short_mavg < long_mavg:\n            return ('sell', proportion)\n        else:\n            return ('hold', 0.0)"
        },
        {
            "name": "Dogecoin_Speculator",
            "funds": 1000,
            "strategy": "def invest_o_matic(history):\n\n    min_turn_interval = 40\n    \n    import pandas as pd\n    import numpy as np\n    \n    if history.empty:\n        \n        decision = 'buy'\n        invest_ratio = 1.0\n    \n    else:\n        \n        turns = history['transaction'].values[-1]\n        current_price = history['price_history'].values[-1]\n        \n        if turns <= 10 or turns >= 719:\n            decision = 'buy'\n            invest_ratio = 1.0\n        \n        elif min_turn_interval >= (720 - turns):\n            decision = 'sell'\n            invest_ratio = 1.0\n        \n        else:\n            cf = np.polyfit(history['transaction'], history['price_history'], 2)\n            poly_function = np.poly1d(cf)\n            \n            x_value_to_predict = turns + min_turn_interval\n            predicted_price = poly_function(x_value_to_predict)\n            \n            predicted_growth = predicted_price / current_price\n            \n            if predicted_growth > 1:\n                decision = 'buy'\n                invest_ratio = (predicted_price - current_price) / predicted_price\n            elif predicted_growth < 1:\n                decision = 'sell'\n                invest_ratio = 1.0\n            else:\n                decision = 'hold'\n                invest_ratio = 0.0\n        \n    return decision, invest_ratio"
        }
    ]
}